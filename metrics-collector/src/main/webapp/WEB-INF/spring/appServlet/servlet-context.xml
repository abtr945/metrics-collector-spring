<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!--
        View resolver that delegates to other view resolvers based on the content type
    -->
    <beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="contentNegotiationManager" ref="cnManager"/>
    </beans:bean>


	<!-- Content Negotiation Manager -  Simple strategy: only path extension is taken into account -->
    <beans:bean id="cnManager"
        class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <beans:property name="favorPathExtension" value="true"/>
        <beans:property name="ignoreAcceptHeader" value="true" />
        <beans:property name="defaultContentType" value="text/html" />
        <beans:property name="useJaf" value="false"/>

        <beans:property name="mediaTypes">
            <beans:map>
                <beans:entry key="html" value="text/html" />
                <beans:entry key="json" value="application/json" />
                <beans:entry key="xml" value="application/xml" />
            </beans:map>
        </beans:property>
    </beans:bean>


	<!-- JSON View -->
	<beans:bean class="com.nicta.metrics.utility.viewresolver.JsonViewResolver" />
 
	<!-- JAXB XML View -->
	<oxm:jaxb2-marshaller id="marshaller" >
        <oxm:class-to-be-bound name="com.nicta.metrics.domain.Experiment"/>
        <oxm:class-to-be-bound name="com.nicta.metrics.domain.Experiments"/>
        <oxm:class-to-be-bound name="com.nicta.metrics.domain.Metric"/>
        <oxm:class-to-be-bound name="com.nicta.metrics.domain.Metrics"/>
    </oxm:jaxb2-marshaller>

    <!-- View resolver that returns an XML Marshalling view. -->
    <beans:bean class="com.nicta.metrics.utility.viewresolver.MarshallingXmlViewResolver" >
        <beans:constructor-arg ref="marshaller"/>
    </beans:bean>
		  
		  
	<!-- Define Spring Interceptors -->
	<interceptors>
		<interceptor>
    		<mapping path="/**"/>
    		<exclude-mapping path="/aws/**"/>
    		<beans:bean class="com.nicta.metrics.utility.interceptor.CredentialsInterceptor" />
    	</interceptor>
	</interceptors>	 
		 
		  
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.nicta.metrics.controller" />
	
</beans:beans>
